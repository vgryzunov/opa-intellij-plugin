/*
 * Use of this source code is governed by the MIT license that can be
 * found in the LICENSE file.
 */

{
  parserClass="com.github.vgryzunov.opaintellijplugin.lang.parser.RegoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Rego"
  psiImplClassSuffix="Impl"
  psiPackage= "com.github.vgryzunov.opaintellijplugin.lang.psi"
  psiImplPackage="com.github.vgryzunov.opaintellijplugin.lang.psi.impl"

  elementTypeHolderClass="com.github.vgryzunov.opaintellijplugin.lang.psi.RegoTypes"
  elementTypeClass="com.github.vgryzunov.opaintellijplugin.lang.psi.RegoElementType"
  tokenTypeClass="com.github.vgryzunov.opaintellijplugin.lang.psi.RegoTokenType"

  tokens = [
        PACKAGE_TOKEN       = 'package'
        IMPORT_TOKEN        = 'import'
        AS                  = 'as'
        DEFAULT             = 'default'
        VAR_ASSIGN          = ':='
        UNIFICATION         = '='
        TRUE                = 'true'
        FALSE               = 'false'
        LPAREN              = '('
        RPAREN              = ')'
        LBRACK              = '['
        RBRACK              = ']'
        ELSE                = 'else'
        LBRACE              = '{'
        RBRACE              = '}'
        SEMICOLON           = ';'
        SOME                = 'some'
        COMMA               = ','
        DOT                 = '.'
        NOT                 = 'not'
        WITH                = 'with'
        COLLON              = ':'
        EQ                  = '=='
        NOT_EQ              = '!='
        LESS_OR_EQUAL       = '<='
        GREATER_OR_EQUAL    = '>='
        GREATHER            = '>'
        LESS                = '<'
        BIT_OR              = '|'
        BIT_AND             = '&'
        PLUS                = '+'
        MINUS               = '-'
        MUL                 = '*'
        QUOTIENT            = '/'
        REMAINDER           = '%'
        SET_OPEN            = 'set('
        NULL                = 'null'
        ASCII_LETTER        = 'regexp:[A-Za-z_][A-Za-z_0-9]*'
        NUMBER              = 'regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
        WHITE_SPACE         = 'regexp:\s+'
        STRING_TOKEN        = 'regexp:"([^\\"\r\n]|\\[^\r\n])*"?'
        RAW_STRING          = 'regexp:`[^`]*(`)?'
        COMMENT             = 'regexp:[ \t]*#[^\r\n]*'

        EVERY               = 'every'
        CONTAINS            = 'contains'
        IF                  = 'if'
        IN                  = 'in'
        EVERY               = 'every'

        CR                  = '\r'
        LF                  = '\l'
    ]
}
module              ::= package (import)* policy
package             ::= PACKAGE_TOKEN ref
import              ::= IMPORT_TOKEN ref [ AS var ]
policy              ::= (rule)*

rule                ::= [DEFAULT]  rule-head  (rule-body)*
rule-head           ::= (ref | var) ( rule-head-set | rule-head-obj | rule-head-func | rule-head-comp )
rule-head-set       ::= CONTAINS term [IF] | "[" term "]"
rule-head-obj       ::= "[" term "]" [assign-operator term] [IF]

rule-head-func      ::= "(" rule-args ")" [assign-operator term] [IF]
rule-head-comp      ::= [assign-operator term] [IF]
rule-args           ::= term ( "," term )*
rule-body           ::= [ ELSE [assign-operator term] [IF] ] ( "{" query "}"  ) /*| literal*/
query               ::= (literal | (";" | ([CR] LF)) )+
literal             ::= ( some-decl | expr | NOT expr ) with-modifier*
some-decl           ::= SOME term ( "," term )* (IN expr)*
with-modifier       ::= WITH term AS term
expr                ::= expr-call | expr-infix | expr-every expr-parens | unary-expr | term
expr-call           ::= var ref-arg-dot* "(" [ expr ( "," expr )* ] ")"
expr-infix          ::= factor-expr  (infix-operator factor-expr)*
factor-expr         ::= ("(" expr-infix ")") | term
expr-every          ::= EVERY var ( "," var )* IN ( term | expr-call | expr-infix ) "{" query "}"
expr-parens         ::= "(" expr ")"
unary-expr          ::= "-" expr

membership          ::= term [ "," term ] IN term
term                ::= ref | var | scalar | array | object | set | array-compr | object-compr | set-compr | membership

/*
term                ::=
      ref t1
    | var t1
    | scalar t1
    | array t1
    | object t1
    | set t1
    | array-compr t1
    | object-compr t1
    | set-compr t1

t1      ::= term t1  ("," term )? IN term
*/

array-compr         ::= "[" term "|" query "]"
set-compr           ::= "{" term "|" query "}"
object-compr        ::= "{" object-item "|" query "}"
infix-operator      ::= assign-operator | bool-operator | arith-operator | bin-operator
bool-operator       ::= "==" | "!=" | "<" | ">" | ">=" | "<="
arith-operator      ::= "+" | "-" | "*" | "/"
bin-operator        ::= "&" | "|"
assign-operator     ::= ":=" | "="

ref                 ::= ( var | array | object | set | array-compr | object-compr | set-compr | expr-call ) ref-arg*
ref-arg             ::= ref-arg-dot | ref-arg-brack
ref-arg-brack       ::= "[" ( scalar | var | array | object | set | "_" )* "]"
ref-arg-dot         ::= "." var
var                 ::= ASCII_LETTER

scalar              ::= string | NUMBER | TRUE | FALSE | NULL
string              ::= STRING_TOKEN| RAW_STRING

array               ::= "[" [term] ( "," term )* [',']"]"
object              ::= "{" object-item ( "," object-item )* "}"
object-item         ::= ( scalar | ref | var ) ":" term
set                 ::= empty-set | non-empty-set
non-empty-set       ::= "{" term ( "," term )* "}"
empty-set           ::= SET_OPEN ")"

